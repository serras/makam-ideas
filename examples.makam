(** IMPORTANT: always introduce a term f for the fixpoint, or use match' **)

(* simple *)
match' (fun f => (lam (fun x => app (k "map") (k "replicate" :: k "2" :: []))))
       (fun f => (lam (fun x => app (k "map") [app (k "replicate") [k "2"] ]))) R ?
match' (fun f => (lam (fun x => app (X f x) (k "0" :: x :: []))))
       (fun f => (k "id")) R ?
match' (fun f => (lam (fun x => app (X f x) (k "0" :: []))))
       (fun f => (k "id")) R ?
match' (fun f => (lam (fun x => app (X f x) (x :: []))))
       (fun f => (k "id")) R ?
match' (fun f => (lam (fun x => (X f x))))
       (fun f => (lam (fun x => app f (x :: [])))) R ?

(* pattern matching *)
match' (fun f => (lam (fun t => case t
                          [ alt (patk ":" (patscons patvar (patscons patvar patsnil)))
                                (bind (fun x => bind (fun xs => body (X t x xs))))
                          , alt (patk "[]" patsnil) (body (Y t))
                          ] )))
       (fun f => (lam (fun t => case t
                          [ alt (patk "[]" patsnil) (body (k "nothing"))
                          , alt (patk ":" (patscons patvar (patscons patvar patsnil)))
                                (bind (fun x => bind (fun xs => body (
                                  app (k "just") (x :: [])
                                ))))
                          ] ))) R ?
match' (fun f => (lam (fun t => case t [ alt (patk ":" (patscons patvar (patscons patvar patsnil)))
                                  (bind (fun x => bind (fun xs => body (X t x xs))))
                            , P ])))
       (fun f => (lam (fun t => case t
                          [ alt (patk "[]" patsnil) (body (k "nothing"))
                          , alt (patk ":" (patscons patvar (patscons patvar patsnil)))
                                (bind (fun x => bind (fun xs => body (
                                  app (k "just") (x :: [])
                                ))))
                          ] ))) R ?

(* composition *)
match' (fun f => (lam (fun x => app (X x) [x])))
       (fun f => (app (k ".") [k "bli", k "blu"])) R ?
match' (fun f => (lam (fun x => app (X x) [x])))
       (fun f => (lam (fun x => app (k "bli") [app (k "blu") [x]]))) R ?

(* maps *)
match' (fun f => lam (fun xs => case xs (L f xs)))
       (fun f => app (k "map") [lam (fun x => app (k "+") [x, k "2"])]) R ?
match' (fun f => lam (fun xs => case xs
                                     (alt (patk ":" (patscons patvar (patscons patvar patsnil)))
                                          (bind (fun y => bind (fun ys => body (
                                             app (k ":") [app (k "+") [y, k "2"], (M f xs y ys)]
                                          ))))
                                     :: (L f xs))))
       (fun f => app (k "map") [lam (fun x => app (k "+") [x, k "2"])]) R ?