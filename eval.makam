typ  : type.
arr  : typ -> typ -> typ.
int  : typ.
list : typ -> typ.

constant : type.
zero : constant.
one : constant.
plus : constant.
map : constant.

typeconst : constant -> typ -> prop.
typeconst zero int.
typeconst one int.
typeconst plus (arr int (arr int int)).
(* polymorphism by variables *)
typeconst map (arr (arr A B) (arr (list A) (list B))).

term : type.
const : constant -> term.
lam   : typ -> (term -> term) -> term.
app   : term -> term -> term.
(* possibly inconsistent holes *)
muurty  : typ -> term -> term. (* typ should always be a var *)
(* definitely inconsistent holes *)
muurbad : typ -> typ -> term -> term.

removemuur : term -> term -> prop.
removemuur (const X) (const X).
removemuur (app X1 X2) (app R1 R2)
  :- removemuur X1 R1, removemuur X2 R2.
removemuur (lam T X) (lam T R)
  :- (x:term -> removemuur (X x) (R x)).
removemuur (muurty T X) R
  :- removemuur X R.
removemuur (muurbad T1 T2 X) (muurbad T1 T2 R)
  :- removemuur X R.

typeof  : term -> typ -> term -> prop.
typeof X R X :- refl.isunif X.
typeof (app T1 T2) R (app E1 E2)
  :- typeof T1 (arr A R) E1, typeof T2 A E2.
typeof (lam A T) (arr A R) (lam A E)
  :- (x:term -> typeof x A x -> typeof (T x) R (E x)).
typeof (const X) R (const X) :- typeconst X R.
(* terms with a wall around *)
typeof (muurty R T) R (muurty R E) :- typeof T R E.
typeof (muurty _ T) Exp (muurbad Exp Inf E) :- typeof T Inf E, not(eq Exp Inf).

tyscheme : type.
forall : (typ -> tyscheme) -> tyscheme.
done   : typ -> tyscheme.

tyschemeof : term -> tyscheme -> term -> prop.
tyschemeof T R E
  :- not(refl.isunif R), eq R (forall R'), (a:typ -> tyschemeof T (R' a) E).
tyschemeof T (done R) E
  :- typeof T R E.

eval : term -> term -> prop.
eval X Y :- refl.isunif(X).
eval (const X) (const X).
eval (lam A Body) (lam A Body).
eval (app E1 E2) E :- eval E1 (lam _ Body), eval E2 Arg, eval (Body Arg) E.
eval (app E1 E2) (app E1b E2b) :- eval E1 E1b, not(eq E1b (lam _ _)), eval E2 E2b.
eval (muurty _ E) Eb :- eval E Eb.
eval (muurbad Exp Inf E) (muurbad Exp Inf Eb) :- eval E Eb.

typeval : term -> tyscheme -> term -> prop.
typeval Orig T Final :- tyschemeof Orig T Elab, eval Elab Final.

rr : type. (* rewriting, NO hints, reparations *)

inapp    : list rr -> list rr -> rr.
leftapp  : list rr -> rr.
rightapp : list rr -> rr.
inlam    : (term -> list rr) -> rr.

npluszero  : term -> rr.
betareduce : term -> term -> rr.

match : term -> term -> list rr -> prop.
applyrw : term -> term -> list rr -> prop.

(* matching algorithm *)
(* we always assume the second argument is fully known *)
(* case one, can be unified -- no rewritings or repairs *)
match X X nil.
(* case two, rewrite *)
match S M Rr :- not(refl.isunif S), applyrw S S1 Rr1,
                 match S1 M Rr2, append Rr1 Rr2 Rr.

(* add rewriting rules for each thing we would like to have *)
(* remember that the rhs is always the most simplified one *)
applyrw (app (app (const plus) X) (const zero)) X (cons (npluszero X) nil).
applyrw (app (lam T F) X) (F X) (cons (betareduce (lam T F) X) nil).
applyrw (app R1 R2) (app N1 R2) (cons (leftapp Rr) nil)
  :- applyrw R1 N1 Rr.
applyrw (app R1 R2) (app R1 N2) (cons (rightapp Rr) nil)
  :- applyrw R2 N2 Rr.
applyrw (lam T R) (lam T P) (cons (inlam Rr) nil)
  :- (x:term -> applyrw (R x) (P x) (Rr x)).

(* intro some rewritings which look at the RHS *)
(* some of them will be within a muurbad *)
(* some others won't, e.g., you missed a pattern match *)

compare : term -> tyscheme -> term -> list rr -> prop.
compare Student ModelTy Model Rr
  :- tyschemeof Student ModelTy Elab,
     removemuur Elab Elab2,
     match Elab2 Model Rr.